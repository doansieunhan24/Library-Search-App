import sys
import os
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                            QWidget, QPushButton, QTextEdit, QLabel, QMessageBox, 
                            QProgressBar, QFrame, QGridLayout, QGroupBox)
from PyQt6.QtCore import Qt, QPropertyAnimation, QRect, pyqtSignal, QTimer, QThread
from PyQt6.QtGui import QFont
from audio_workers import RecordingWorker, AudioWorker

class PipelineWorker(QThread):
    """Worker t·ªëi ∆∞u ƒë·ªÉ ch·∫°y pipeline tu·∫ßn t·ª±"""
    progress_update = pyqtSignal(str, int)
    finished = pyqtSignal(str, str)
    error = pyqtSignal(str)
    
    def __init__(self, recorded_text):
        super().__init__()
        self.recorded_text = recorded_text
        self.is_running = True
    
    def run(self):
        processor = None
        try:
            print(f"üîÑ Starting optimized pipeline: '{self.recorded_text}'")
            
            # Kh·ªüi t·∫°o processor
            from search_processor import SearchProcessor
            processor = SearchProcessor()
            
            # Pipeline steps v·ªõi error handling t·ªët h∆°n
            steps = [
                (20, "üîç CH·ªàNH S·ª¨A VƒÇN B·∫¢N...", self._correct_text),
                (40, "‚öôÔ∏è T·∫†O TRUY V·∫§N SQL...", self._generate_sql),
                (60, "‚úÖ KI·ªÇM TRA TRUY V·∫§N...", self._validate_sql),
                (80, "üìö T√åM KI·∫æM DATABASE...", self._query_database),
                (90, "üìù FORMAT K·∫æT QU·∫¢...", self._format_results)
            ]
            
            context = {'processor': processor, 'text': self.recorded_text}
            
            for progress, message, step_func in steps:
                if not self.is_running:
                    return
                    
                self.progress_update.emit(message, progress)
                context = step_func(context)
                
                if context.get('error'):
                    raise Exception(context['error'])
            
            # Ho√†n th√†nh
            self.progress_update.emit("‚úÖ HO√ÄN TH√ÄNH!", 100)
            self.finished.emit(
                context.get('corrected_text', self.recorded_text),
                context.get('formatted_results', 'Kh√¥ng c√≥ k·∫øt qu·∫£')
            )
            
        except Exception as e:
            print(f"‚ùå Pipeline error: {str(e)}")
            self.error.emit(str(e))
        finally:
            if processor:
                try:
                    processor.close()
                except:
                    pass
    
    def _correct_text(self, context):
        """B∆∞·ªõc 1: S·ª≠a vƒÉn b·∫£n"""
        try:
            corrected = context['processor'].correct_text(context['text'])
            context['corrected_text'] = corrected
            print(f"‚úì Text: '{context['text']}' ‚Üí '{corrected}'")
            return context
        except Exception as e:
            context['error'] = f"L·ªói ch·ªânh s·ª≠a vƒÉn b·∫£n: {str(e)}"
            return context
    
    def _generate_sql(self, context):
        """B∆∞·ªõc 2: T·∫°o SQL"""
        try:
            sql = context['processor'].text_to_sql(context['corrected_text'])
            context['sql_query'] = sql
            print(f"‚úì SQL: {sql}")
            return context
        except Exception as e:
            context['error'] = f"L·ªói t·∫°o truy v·∫•n: {str(e)}"
            return context
    
    def _validate_sql(self, context):
        """B∆∞·ªõc 3: Ki·ªÉm tra SQL"""
        sql = context.get('sql_query', '')
        if not sql or not sql.strip():
            context['error'] = "Kh√¥ng th·ªÉ t·∫°o c√¢u truy v·∫•n t·ª´ vƒÉn b·∫£n"
        return context
    
    def _query_database(self, context):
        """B∆∞·ªõc 4: Truy v·∫•n database"""
        try:
            results = context['processor'].query_database(context['sql_query'])
            
            # Debug: In ra c·∫•u tr√∫c d·ªØ li·ªáu ƒë·ªÉ hi·ªÉu r√µ h∆°n
            print(f"üîç Debug - Raw results type: {type(results)}")
            print(f"üîç Debug - Raw results: {results}")
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ - c√≥ th·ªÉ l√† tuple (success, data) ho·∫∑c ch·ªâ l√† data
            if isinstance(results, tuple) and len(results) == 2:
                success, data = results
                if success:
                    context['results'] = data
                    count = len(data) if isinstance(data, list) else 'N/A'
                    print(f"‚úì Found: {count} results")
                else:
                    context['error'] = f"L·ªói truy v·∫•n database: {data}"
            else:
                # Tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ tr·ª±c ti·∫øp data
                context['results'] = results
                count = len(results) if isinstance(results, list) else 'N/A'
                print(f"‚úì Found: {count} results")
            
            return context
        except Exception as e:
            context['error'] = f"L·ªói truy v·∫•n database: {str(e)}"
            return context
    
    def _format_results(self, context):
        """B∆∞·ªõc 5: Format k·∫øt qu·∫£"""
        try:
            formatted = self.format_results(context['results'])
            context['formatted_results'] = formatted
            return context
        except Exception as e:
            context['error'] = f"L·ªói format k·∫øt qu·∫£: {str(e)}"
            return context
    
    def format_results(self, results):
        """Format k·∫øt qu·∫£ th√†nh string ƒë·∫πp v√† t·ªëi ∆∞u"""
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p results l√† tuple (success, data)
        if isinstance(results, tuple) and len(results) == 2:
            success, data = results
            if not success:
                return f"‚ùå L·ªói truy v·∫•n: {data}"
            results = data
        
        if isinstance(results, list) and results:
            formatted_results = ""
            
            for i, item in enumerate(results, 1):
                if isinstance(item, dict):
                    formatted_results += f"üìñ K·∫øt qu·∫£ {i}:\n"
                    
                    # Format theo th·ª© t·ª± ∆∞u ti√™n
                    priority_fields = [
                        ('title', 'üìö Ti√™u ƒë·ªÅ'),
                        ('author', '‚úçÔ∏è T√°c gi·∫£'),
                        ('category', 'üìÇ Th·ªÉ lo·∫°i'),
                        ('description', 'üìù M√¥ t·∫£'),
                        ('price', 'üí∞ Gi√°'),
                        ('publication_year', 'üìÖ NƒÉm xu·∫•t b·∫£n'),
                        ('year', 'üìÖ NƒÉm xu·∫•t b·∫£n'),
                        ('isbn', 'üî¢ ISBN')
                    ]
                    
                    for field, icon_label in priority_fields:
                        if field in item and item[field]:
                            value = item[field]
                            if field == 'price' and isinstance(value, (int, float)):
                                formatted_results += f"   {icon_label}: {value:,.0f} VND\n"
                            else:
                                formatted_results += f"   {icon_label}: {value}\n"
                    
                    # Th√™m c√°c field kh√°c n·∫øu c√≥
                    displayed_fields = [field for field, _ in priority_fields]
                    for key, value in item.items():
                        if key not in displayed_fields and value:
                            formatted_results += f"   ‚Ä¢ {key}: {value}\n"
                    
                    formatted_results += "\n"
                else:
                    formatted_results += f"üìñ K·∫øt qu·∫£ {i}: {str(item)}\n\n"
            
            return formatted_results
        elif isinstance(results, list) and not results:
            return "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu t√¨m ki·∫øm.\n\nüí° G·ª£i √Ω:\n‚Ä¢ Th·ª≠ t·ª´ kh√≥a kh√°c\n‚Ä¢ Ki·ªÉm tra ch√≠nh t·∫£\n‚Ä¢ S·ª≠ d·ª•ng t·ª´ kh√≥a ƒë∆°n gi·∫£n h∆°n"
        else:
            return f"üìÑ K·∫øt qu·∫£: {str(results)}"
    
    def stop(self):
        """D·ª´ng pipeline m·ªôt c√°ch an to√†n"""
        self.is_running = False
        self.quit()
        self.wait()

class LibrarySearchApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.temp_recording = None
        self.recorded_text = ""
        self.recording_time = 0
        self.current_stage = 1
        
        # Worker instances
        self.recording_worker = None
        self.transcription_worker = None
        self.pipeline_worker = None
        
        # Timer for recording
        self.recording_timer_obj = QTimer()
        self.recording_timer_obj.timeout.connect(self.update_recording_time_tick)
        self.recording_seconds = 0
        
        self.initUI()
    
    def initUI(self):
        self.setWindowTitle("üìö T√¨m Ki·∫øm Th∆∞ Vi·ªán B·∫±ng Gi·ªçng N√≥i")
        self.setGeometry(200, 100, 800, 600)
        self.setFixedSize(800, 600)
        
        # Style chung
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f8f9fa;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QFrame {
                border: 2px solid #2c3e50;
                border-radius: 10px;
                background-color: #ffffff;
                margin: 10px;
            }
        """)
        
        # Central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 20, 20, 20)
        central_widget.setLayout(main_layout)
        
        # √î l·ªõn ph√≠a tr√™n - H∆∞·ªõng d·∫´n/Hi·ªÉn th·ªã n·ªôi dung
        self.create_main_display_box(main_layout)
        
        # Layout cho 2 √¥ nh·ªè ph√≠a d∆∞·ªõi
        bottom_layout = QHBoxLayout()
        bottom_layout.setSpacing(10)
        
        # √î nh·ªè tr√°i - N√∫t ch√≠nh (Ghi √¢m/X√°c nh·∫≠n/T√¨m ki·∫øm m·ªõi)
        self.create_main_action_box(bottom_layout)
        
        # √î nh·ªè ph·∫£i - N√∫t ph·ª• (D·ª´ng/Ghi l·∫°i)
        self.create_secondary_action_box(bottom_layout)
        
        main_layout.addLayout(bottom_layout)
        
        # Progress bar v√† status (·∫©n ban ƒë·∫ßu)
        self.create_status_section(main_layout)
        
        # Kh·ªüi t·∫°o stage 1
        self.update_ui_for_stage(1)
    
    def create_main_display_box(self, layout):
        """T·∫°o √¥ l·ªõn ph√≠a tr√™n - Hi·ªÉn th·ªã n·ªôi dung ch√≠nh"""
        self.main_display_frame = QFrame()
        self.main_display_frame.setMinimumHeight(300)
        self.main_display_frame.setStyleSheet("""
            QFrame {
                border: 3px solid #3498db;
                border-radius: 15px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #e8f4fd, stop:1 #d4edda);
                margin: 5px;
            }
        """)
        
        self.main_display_layout = QVBoxLayout(self.main_display_frame)
        self.main_display_layout.setContentsMargins(30, 30, 30, 30)
        self.main_display_layout.setSpacing(20)
        
        # Title - lu√¥n hi·ªÉn th·ªã
        self.title_label = QLabel("üìö H·ªÜ TH·ªêNG T√åM KI·∫æM TH√îNG MINH")
        self.title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.title_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 24px;
                font-weight: bold;
                background: transparent;
                border: none;
                padding: 10px;
            }
        """)
        
        # Content area - thay ƒë·ªïi theo stage
        self.content_widget = QWidget()
        self.content_layout = QVBoxLayout(self.content_widget)
        self.content_layout.setSpacing(15)
        
        # Stage 1: Instruction
        self.instruction_label = QLabel("H√ÉY N√ìI R√ï R√ÄNG Y√äU C·∫¶U T√åM KI·∫æM S√ÅCH C·ª¶A B·∫†N\n\nüéπ Ph√≠m t·∫Øt: SPACE ƒë·ªÉ ghi √¢m, ESC ƒë·ªÉ d·ª´ng, ENTER ƒë·ªÉ x√°c nh·∫≠n")
        self.instruction_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.instruction_label.setWordWrap(True)
        self.instruction_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 18px;
                font-weight: bold;
                background: transparent;
                border: none;
                padding: 15px;
            }
        """)
        
        self.examples_label = QLabel("üí° V√≠ d·ª•: \"T√¨m s√°ch Python\", \"S√°ch gi√° 50.000\", \"Java programming nƒÉm 2023\"")
        self.examples_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.examples_label.setWordWrap(True)
        self.examples_label.setStyleSheet("""
            QLabel {
                color: #7f8c8d;
                font-size: 14px;
                font-style: italic;
                background: transparent;
                border: none;
                padding: 10px;
            }
        """)
        
        # Stage 2: Text verification
        self.verification_label = QLabel("‚úÖ KI·ªÇM TRA VƒÇN B·∫¢N NH·∫¨N DI·ªÜN")
        self.verification_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.verification_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 18px;
                font-weight: bold;
                background: transparent;
                border: none;
                padding: 10px;
            }
        """)
        self.verification_label.setVisible(False)
        
        self.transcription_display = QTextEdit()
        self.transcription_display.setMinimumHeight(150)
        self.transcription_display.setReadOnly(True)
        self.transcription_display.setPlaceholderText("VƒÉn b·∫£n nh·∫≠n di·ªán s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        self.transcription_display.setStyleSheet("""
            QTextEdit {
                background: #ffffff;
                border: 2px solid #3498db;
                border-radius: 10px;
                padding: 15px;
                font-size: 14px;
                color: #2c3e50;
                line-height: 1.5;
            }
        """)
        self.transcription_display.setVisible(False)
        
        # Stage 3: Results
        self.results_label = QLabel("üìö K·∫æT QU·∫¢ T√åM KI·∫æM")
        self.results_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.results_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 18px;
                font-weight: bold;
                background: transparent;
                border: none;
                padding: 10px;
            }
        """)
        self.results_label.setVisible(False)
        
        self.result_output = QTextEdit()
        self.result_output.setMinimumHeight(200)
        self.result_output.setReadOnly(True)
        self.result_output.setPlaceholderText("K·∫øt qu·∫£ t√¨m ki·∫øm s√°ch s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        self.result_output.setStyleSheet("""
            QTextEdit {
                background: #ffffff;
                border: 2px solid #2ecc71;
                border-radius: 10px;
                padding: 15px;
                font-size: 14px;
                color: #2c3e50;
                line-height: 1.5;
            }
        """)
        self.result_output.setVisible(False)
        
        # Add all content to layout
        self.content_layout.addWidget(self.instruction_label)
        self.content_layout.addWidget(self.examples_label)
        self.content_layout.addWidget(self.verification_label)
        self.content_layout.addWidget(self.transcription_display)
        self.content_layout.addWidget(self.results_label)
        self.content_layout.addWidget(self.result_output)
        self.content_layout.addStretch()
        
        self.main_display_layout.addWidget(self.title_label)
        self.main_display_layout.addWidget(self.content_widget)
        
        layout.addWidget(self.main_display_frame, 2)  # Chi·∫øm 2/3 kh√¥ng gian
    
    def create_main_action_box(self, layout):
        """T·∫°o √¥ nh·ªè tr√°i - N√∫t h√†nh ƒë·ªông ch√≠nh"""
        self.main_action_frame = QFrame()
        self.main_action_frame.setMinimumHeight(120)
        self.main_action_frame.setStyleSheet("""
            QFrame {
                border: 2px solid #27ae60;
                border-radius: 10px;
                background-color: #ffffff;
                margin: 5px;
            }
        """)
        
        main_action_layout = QVBoxLayout(self.main_action_frame)
        main_action_layout.setContentsMargins(20, 20, 20, 20)
        main_action_layout.setSpacing(15)
        
        # Main action button - thay ƒë·ªïi theo stage
        self.main_action_button = QPushButton("üé§ GHI √ÇM")
        self.main_action_button.clicked.connect(self.main_action_clicked)
        self.main_action_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #2ecc71, stop:1 #27ae60);
                color: white;
                border: none;
                border-radius: 15px;
                padding: 15px 20px;
                font-size: 16px;
                font-weight: bold;
                min-height: 50px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #27ae60, stop:1 #229954);
            }
            QPushButton:pressed {
                background: #1e8449;
            }
            QPushButton:disabled {
                background: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        main_action_layout.addWidget(self.main_action_button)
        layout.addWidget(self.main_action_frame, 1)
    
    def create_secondary_action_box(self, layout):
        """T·∫°o √¥ nh·ªè ph·∫£i - N√∫t h√†nh ƒë·ªông ph·ª•"""
        self.secondary_action_frame = QFrame()
        self.secondary_action_frame.setMinimumHeight(120)
        self.secondary_action_frame.setStyleSheet("""
            QFrame {
                border: 2px solid #e74c3c;
                border-radius: 10px;
                background-color: #ffffff;
                margin: 5px;
            }
        """)
        
        secondary_action_layout = QVBoxLayout(self.secondary_action_frame)
        secondary_action_layout.setContentsMargins(20, 20, 20, 20)
        secondary_action_layout.setSpacing(15)
        
        # Secondary action button - thay ƒë·ªïi theo stage
        self.secondary_action_button = QPushButton("‚èπÔ∏è D·ª™NG")
        self.secondary_action_button.clicked.connect(self.secondary_action_clicked)
        self.secondary_action_button.setEnabled(False)
        self.secondary_action_button.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e74c3c, stop:1 #c0392b);
                color: white;
                border: none;
                border-radius: 15px;
                padding: 15px 20px;
                font-size: 16px;
                font-weight: bold;
                min-height: 50px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #c0392b, stop:1 #a93226);
            }
            QPushButton:pressed {
                background: #922b21;
            }
            QPushButton:disabled {
                background: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        secondary_action_layout.addWidget(self.secondary_action_button)
        layout.addWidget(self.secondary_action_frame, 1)
    
    def create_status_section(self, layout):
        """T·∫°o ph·∫ßn status v√† progress bar"""
        self.status_frame = QFrame()
        self.status_frame.setVisible(False)
        self.status_frame.setStyleSheet("""
            QFrame {
                border: 2px solid #3498db;
                border-radius: 10px;
                background-color: #ffffff;
                margin: 5px;
            }
        """)
        
        status_layout = QVBoxLayout(self.status_frame)
        status_layout.setContentsMargins(20, 15, 20, 15)
        status_layout.setSpacing(10)
        
        # Status label
        self.recording_status = QLabel("üü¢ S·∫µn s√†ng ghi √¢m")
        self.recording_status.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.recording_status.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                font-size: 14px;
                font-weight: bold;
                background: transparent;
                border: none;
                padding: 5px;
            }
        """)
        
        # Timer
        self.recording_timer = QLabel("‚è±Ô∏è 00:00")
        self.recording_timer.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.recording_timer.setVisible(False)
        self.recording_timer.setStyleSheet("""
            QLabel {
                color: #e74c3c;
                font-size: 16px;
                font-weight: bold;
                font-family: 'Courier New', monospace;
                background: transparent;
                border: none;
                padding: 5px;
            }
        """)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #3498db;
                border-radius: 5px;
                background: #ecf0f1;
                text-align: center;
                font-size: 12px;
                height: 20px;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #3498db, stop:1 #2ecc71);
                border-radius: 4px;
            }
        """)
        
        status_layout.addWidget(self.recording_status)
        status_layout.addWidget(self.recording_timer)
        status_layout.addWidget(self.progress_bar)
        
        layout.addWidget(self.status_frame)
    
    def update_ui_for_stage(self, stage):
        """C·∫≠p nh·∫≠t UI theo stage"""
        self.current_stage = stage
        
        # ·∫®n t·∫•t c·∫£ content
        self.instruction_label.setVisible(False)
        self.examples_label.setVisible(False)
        self.verification_label.setVisible(False)
        self.transcription_display.setVisible(False)
        self.results_label.setVisible(False)
        self.result_output.setVisible(False)
        
        if stage == 1:  # Stage ghi √¢m
            self.instruction_label.setVisible(True)
            self.examples_label.setVisible(True)
            self.main_action_button.setText("üé§ GHI √ÇM")
            self.main_action_button.setEnabled(True)
            self.secondary_action_button.setText("‚èπÔ∏è D·ª™NG")
            self.secondary_action_button.setEnabled(False)
            self.status_frame.setVisible(False)
            
        elif stage == 2:  # Stage ki·ªÉm tra vƒÉn b·∫£n
            self.verification_label.setVisible(True)
            self.transcription_display.setVisible(True)
            self.main_action_button.setText("‚úÖ X√ÅC NH·∫¨N")
            self.main_action_button.setEnabled(True)
            self.secondary_action_button.setText("üîÑ GHI L·∫†I")
            self.secondary_action_button.setEnabled(True)
            self.status_frame.setVisible(False)
            
        elif stage == 3:  # Stage k·∫øt qu·∫£
            self.results_label.setVisible(True)
            self.result_output.setVisible(True)
            self.main_action_button.setText("üîÑ T√åM KI·∫æM M·ªöI")
            self.main_action_button.setEnabled(True)
            self.secondary_action_button.setText("üìã COPY")
            self.secondary_action_button.setEnabled(True)
            self.status_frame.setVisible(False)
    
    def main_action_clicked(self):
        """X·ª≠ l√Ω click n√∫t ch√≠nh"""
        if self.current_stage == 1:
            self.start_recording()
        elif self.current_stage == 2:
            self.confirm_and_search()
        elif self.current_stage == 3:
            self.start_new_search()
    
    def secondary_action_clicked(self):
        """X·ª≠ l√Ω click n√∫t ph·ª•"""
        if self.current_stage == 1:
            self.stop_recording()
        elif self.current_stage == 2:
            self.retry_recording()
        elif self.current_stage == 3:
            self.copy_results()
    
    def start_recording(self):
        """B·∫Øt ƒë·∫ßu ghi √¢m"""
        # D·ª´ng t·∫•t c·∫£ workers tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        self.stop_all_workers()
        
        self.main_action_button.setEnabled(False)
        self.secondary_action_button.setEnabled(True)
        self.recording_status.setText("üî¥ ƒêANG GHI √ÇM - H√£y n√≥i r√µ y√™u c·∫ßu c·ªßa b·∫°n...")
        self.recording_timer.setVisible(True)
        self.recording_timer.setText("‚è±Ô∏è 00:00")
        self.status_frame.setVisible(True)
        
        # Reset timer
        self.recording_seconds = 0
        self.recording_timer_obj.start(1000)
        
        # Start recording worker
        self.recording_worker = RecordingWorker()
        self.recording_worker.recording_finished.connect(self.on_recording_finished)
        self.recording_worker.error.connect(self.on_recording_error)
        self.recording_worker.start()
    
    def stop_recording(self):
        """D·ª´ng ghi √¢m"""
        if self.recording_worker and self.recording_worker.isRunning():
            self.recording_worker.stop_recording()
        
        self.recording_timer_obj.stop()
        self.main_action_button.setEnabled(True)
        self.secondary_action_button.setEnabled(False)
        self.recording_status.setText("‚è≥ ƒêANG X·ª¨ L√ù √ÇM THANH - Vui l√≤ng ƒë·ª£i...")
        self.recording_timer.setVisible(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate progress
    
    def update_recording_time_tick(self):
        """C·∫≠p nh·∫≠t th·ªùi gian ghi √¢m m·ªói gi√¢y"""
        self.recording_seconds += 1
        minutes = self.recording_seconds // 60
        secs = self.recording_seconds % 60
        self.recording_timer.setText(f"‚è±Ô∏è {minutes:02d}:{secs:02d}")
    
    def stop_all_workers(self):
        """D·ª´ng t·∫•t c·∫£ c√°c worker ƒëang ch·∫°y m·ªôt c√°ch an to√†n"""
        workers = [
            ('recording_worker', lambda w: w.stop_recording()),
            ('transcription_worker', lambda w: w.quit()),
            ('pipeline_worker', lambda w: w.stop())
        ]
        
        for worker_name, stop_func in workers:
            if hasattr(self, worker_name):
                worker = getattr(self, worker_name)
                if worker and worker.isRunning():
                    try:
                        stop_func(worker)
                        worker.wait(1000)  # Wait max 1 second
                    except:
                        worker.terminate()  # Force terminate if needed
        
        self.recording_timer_obj.stop()
    
    def update_recording_time(self, seconds):
        """C·∫≠p nh·∫≠t th·ªùi gian ghi √¢m"""
        minutes = seconds // 60
        secs = seconds % 60
        self.recording_timer.setText(f"‚è±Ô∏è {minutes:02d}:{secs:02d}")
    
    def on_recording_finished(self, audio_file):
        """X·ª≠ l√Ω khi ghi √¢m ho√†n th√†nh"""
        self.temp_recording = audio_file
        self.recording_timer_obj.stop()
        
        print(f"üé§ Recording completed: {audio_file}")
        
        # B·∫Øt ƒë·∫ßu transcription
        self.transcription_worker = AudioWorker(audio_file)
        self.transcription_worker.finished.connect(self.on_transcription_finished)
        self.transcription_worker.error.connect(self.on_transcription_error)
        self.transcription_worker.start()
    
    def on_recording_error(self, error_msg):
        """X·ª≠ l√Ω l·ªói ghi √¢m"""
        self.stop_all_workers()
        QMessageBox.critical(self, "L·ªói ghi √¢m", error_msg)
        self.update_ui_for_stage(1)
    
    def on_transcription_finished(self, text, results):
        """X·ª≠ l√Ω khi nh·∫≠n di·ªán ho√†n th√†nh"""
        self.progress_bar.setVisible(False)
        
        print(f"üé§ Transcription: '{text}'")
        
        if "Kh√¥ng nh·∫≠n di·ªán" in text or "L·ªói" in text or len(text.strip()) < 3:
            QMessageBox.warning(self, "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c", 
                              "Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i r√µ r√†ng.\nVui l√≤ng th·ª≠ l·∫°i v√† n√≥i to, r√µ h∆°n.")
            self.update_ui_for_stage(1)
        else:
            self.recorded_text = text
            self.transcription_display.setText(text)
            self.update_ui_for_stage(2)
    
    def on_transcription_error(self, error_msg):
        """X·ª≠ l√Ω l·ªói nh·∫≠n di·ªán"""
        self.stop_all_workers()
        QMessageBox.critical(self, "L·ªói", error_msg)
        self.update_ui_for_stage(1)
    
    def confirm_and_search(self):
        """X√°c nh·∫≠n vƒÉn b·∫£n v√† b·∫Øt ƒë·∫ßu pipeline t√¨m ki·∫øm"""
        if not self.recorded_text:
            return
        
        # D·ª´ng t·∫•t c·∫£ workers tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu pipeline
        self.stop_all_workers()
        
        self.update_ui_for_stage(3)
        self.result_output.setText("üîç ƒêANG KH·ªûI ƒê·ªòNG PIPELINE T√åM KI·∫æM...\n\nVui l√≤ng ƒë·ª£i...")
        
        # Hi·ªÉn th·ªã progress bar
        self.status_frame.setVisible(True)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.recording_timer.setVisible(False)
        
        # V√¥ hi·ªáu h√≥a buttons
        self.main_action_button.setEnabled(False)
        self.secondary_action_button.setEnabled(False)
        
        # B·∫Øt ƒë·∫ßu pipeline worker
        self.pipeline_worker = PipelineWorker(self.recorded_text)
        self.pipeline_worker.progress_update.connect(self.on_pipeline_progress)
        self.pipeline_worker.finished.connect(self.on_pipeline_finished)
        self.pipeline_worker.error.connect(self.on_pipeline_error)
        self.pipeline_worker.start()
    
    def on_pipeline_progress(self, message, percentage):
        """C·∫≠p nh·∫≠t ti·∫øn tr√¨nh pipeline"""
        self.recording_status.setText(message)
        self.progress_bar.setValue(percentage)
        
        # C·∫≠p nh·∫≠t k·∫øt qu·∫£ hi·ªÉn th·ªã
        if percentage < 100:
            self.result_output.setText(f"{message}\n\nüîÑ Ti·∫øn tr√¨nh: {percentage}%")
    
    def on_pipeline_finished(self, corrected_text, results):
        """Ho√†n th√†nh pipeline"""
        self.progress_bar.setVisible(False)
        self.status_frame.setVisible(False)
        
        # K√≠ch ho·∫°t l·∫°i buttons
        self.main_action_button.setEnabled(True)
        self.secondary_action_button.setEnabled(True)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi format t·ªëi ∆∞u
        result_text = f"üéØ VƒÇN B·∫¢N NH·∫¨N DI·ªÜN:\n   \"{self.recorded_text}\"\n\n"
        
        if corrected_text != self.recorded_text:
            result_text += f"‚úÖ VƒÇN B·∫¢N ƒê√É CH·ªàNH S·ª¨A:\n   \"{corrected_text}\"\n\n"
        
        result_text += f"üìö K·∫æT QU·∫¢ T√åM KI·∫æM:\n\n{results}"
        
        self.result_output.setText(result_text)
        
        # Log t·ªëi ∆∞u
        print(f"‚úÖ Pipeline completed successfully")
    
    def on_pipeline_error(self, error_msg):
        """X·ª≠ l√Ω l·ªói pipeline"""
        self.progress_bar.setVisible(False)
        self.status_frame.setVisible(False)
        
        # K√≠ch ho·∫°t l·∫°i buttons
        self.main_action_button.setEnabled(True)
        self.secondary_action_button.setEnabled(True)
        
        print(f"‚ùå Pipeline error: {error_msg}")
        
        # Ph√¢n lo·∫°i l·ªói v√† hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
        if "database" in error_msg.lower() or "k·∫øt n·ªëi" in error_msg.lower():
            self.result_output.setText(
                "‚ùå L·ªñI C∆† S·ªû D·ªÆ LI·ªÜU\n\n"
                "Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c truy v·∫•n database.\n"
                "Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi database.\n\n"
                "üí° Th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t."
            )
            QMessageBox.critical(self, "L·ªói Database", 
                               "L·ªói k·∫øt n·ªëi database. Vui l√≤ng th·ª≠ l·∫°i!")
            
        elif "truy v·∫•n" in error_msg.lower() or "sql" in error_msg.lower():
            self.result_output.setText(
                "‚ùå L·ªñI T·∫†O TRUY V·∫§N\n\n"
                "Kh√¥ng th·ªÉ hi·ªÉu y√™u c·∫ßu t√¨m ki·∫øm c·ªßa b·∫°n.\n"
                "Vui l√≤ng n√≥i r√µ r√†ng h∆°n.\n\n"
                "üí° V√≠ d·ª•:\n"
                "‚Ä¢ 'T√¨m s√°ch Python'\n"
                "‚Ä¢ 'S√°ch gi√° d∆∞·ªõi 100.000'\n"
                "‚Ä¢ 'S√°ch v·ªÅ AI nƒÉm 2023'"
            )
            
        elif "ch·ªânh s·ª≠a" in error_msg.lower() or "correct" in error_msg.lower():
            self.result_output.setText(
                "‚ùå L·ªñI X·ª¨ L√ù VƒÇN B·∫¢N\n\n"
                "Kh√¥ng th·ªÉ x·ª≠ l√Ω vƒÉn b·∫£n nh·∫≠n di·ªán.\n"
                "VƒÉn b·∫£n c√≥ th·ªÉ qu√° ng·∫Øn ho·∫∑c kh√¥ng r√µ r√†ng.\n\n"
                "üí° Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u d√†i h∆°n v√† r√µ r√†ng h∆°n."
            )
        else:
            self.result_output.setText(
                f"‚ùå L·ªñI H·ªÜ TH·ªêNG\n\n"
                f"C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω:\n"
                f"{error_msg}\n\n"
                f"üí° Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£."
            )
    
    def retry_recording(self):
        """Quay l·∫°i ghi √¢m"""
        self.stop_all_workers()
        self.cleanup_temp_files()
        self.update_ui_for_stage(1)
    
    def start_new_search(self):
        """B·∫Øt ƒë·∫ßu t√¨m ki·∫øm m·ªõi"""
        self.stop_all_workers()
        self.cleanup_temp_files()
        self.update_ui_for_stage(1)
    
    def cleanup_temp_files(self):
        """D·ªçn d·∫πp c√°c file t·∫°m"""
        self.transcription_display.clear()
        self.result_output.clear()
        self.recorded_text = ""
        
        if self.temp_recording and os.path.exists(self.temp_recording):
            try:
                os.remove(self.temp_recording)
            except:
                pass
            self.temp_recording = None
    
    def copy_results(self):
        """Copy k·∫øt qu·∫£"""
        if self.result_output.toPlainText():
            QApplication.clipboard().setText(self.result_output.toPlainText())
            QMessageBox.information(self, "ƒê√£ copy", "K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c copy v√†o clipboard!")
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        self.stop_all_workers()
        self.cleanup_temp_files()
        event.accept()
    
    def showEvent(self, event):
        """Optimize khi hi·ªÉn th·ªã window"""
        super().showEvent(event)
        # Pre-load imports ƒë·ªÉ tƒÉng t·ªëc pipeline
        try:
            import search_processor
            print("‚úì Pre-loaded search_processor")
        except:
            pass
    
    def keyPressEvent(self, event):
        """Keyboard shortcuts"""
        from PyQt6.QtCore import Qt
        if event.key() == Qt.Key.Key_Space and self.current_stage == 1:
            self.start_recording()
        elif event.key() == Qt.Key.Key_Escape:
            self.stop_all_workers()
        elif event.key() == Qt.Key.Key_Return and self.current_stage == 2:
            self.confirm_and_search()
        else:
            super().keyPressEvent(event)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = LibrarySearchApp()
    window.show()
    sys.exit(app.exec())